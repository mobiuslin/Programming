'''
数组1234还未整理完，仅做完联系
'''


'''
ex01
'''
###############
#
# @lc app=leetcode.cn id=15 lang=python
#
# [15] 三数之和
#
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        list_nums = []
        nums.sort()
        for i in range(len(nums)):
            if nums[i] > 0:
                break
            if i > 0 and nums[i] == nums[i-1]:
                continue
            j = i + 1
            k = len(nums) - 1
            while j < k:
                if nums[j] + nums[k] == -nums[i]:
                    list_nums.append([nums[i],nums[j],nums[k]])
                    while j<k and nums[j]==nums[j+1]:j+=1
                    while j<k and nums[k]==nums[k-1]:k-=1
                    j+=1
                    k-=1
                elif nums[j]+nums[k]<-nums[i]:
                    j+=1
                else:
                    k-=1
        return list_nums
###############
'''
ex02
'''
###############
#
# @lc app=leetcode.cn id=169 lang=python
#
# [169] 求众数
#
class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        len_=len(nums)
        cnt=1
        cnt_=1
        j=0
        j_max=0
        for i in range(1,len_):
            if nums[i]==nums[i-1]:
                cnt+=1
                j=i
            if nums[i]!=nums[i-1]:
                cnt=1
            if cnt_<cnt:
                cnt_=cnt
                j_max=j
        return nums[j_max]
###############
'''
ex03
'''
###############
#
# @lc app=leetcode.cn id=41 lang=python
#
# [41] 缺失的第一个正数
#
class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """ 
        nums=set(nums)
        nums=list(nums)
        nums.sort()
        len_=len(nums)
        j=1
        j0=1
        if len_>0:
            for i in range(len_):
                if nums[i]>0:
                    if nums[i]==j:
                        j0=j
                        j0+=1
                    else:
                        return j0
                        break
                    j+=1
                if i==len_-1:
                    return j0
        else:
            return 1
###############

Task2
#2.1.1关于单链表代码熟悉借鉴博客内容
#####################
class Node(object):
    def __init__(self, elem):
        self.elem = elem
        self.next = None
        
class SingleLinkList(object):
    '''单链表'''
    def __init__(self, node=None):
        self.__head = node
        
    def is_empty(self):
        return self.__head == None
    
    def length(self):
        cur = self.__head
        count = 0
        while cur != None:
            count += 1
            cur = cur.next
        return count
    
    def travel(self):
        '''遍历列表'''
        cur = self.__head
        while cur != None:
            print(cur.elem, end= ' ')
            cur = cur.next
        print("\n")
        
    def add(self, item):
        '''链表头部添加元素'''
        node = Node(item)
        node.next = self.__head
        self.__head = node
        
    def append(self, item):
        '''链表尾部添加元素'''
        node = Node(item)
        if self.is_empty():
            self.__head = node
        else:
            cur = self.__head
            while cur.next != None:
                cur = cur.next
            cur.next = node
    
    def insert(self, pos, item):
        '''指定位置添加元素'''
        if pos <= 0:
            self.add(item)
        elif pos > self.length() - 1:
            self.append(item)
        else:
            per = self.__head
            count = 0
            while count < pos - 1:
                count += 1
                per = per.next
            node = Node(item)
            node.next = per.next
            per.next = node
            
    def remove(self, item):
        '''删除节点'''
        cur = self.__head
        pre = None
        while cur != None:
            if cur.elem == item:
                '''先判断是否为头节点'''
                if cur == self.__head:
                    self.__head = cur.next
                else:
                    pre.next = cur.next
                break
            else:
                pre = cur
                cur = cur.next
    
    def search(self, item):
        '''查找节点是否存在'''
        cur = self.__head
        while not cur:
            if cur.elem == item:
                return True
            else:
                cur = cur.next
        return False
    
if __name__ == "__main__":
    node = Node(100)
    ll = SingleLinkList()
    print(ll.is_empty())
    print(ll.length())

    ll.append(3)
    ll.append(4)
    ll.add(9989)
    ll.insert(-3,110)
    ll.insert(4,111)
    
    print(ll.is_empty())
    print(ll.length())
    
    ll.travel()
    ll.remove(111)
    ll.travel()
#####################
'''
2.1.2循环单链表是单链表的一种变形，其最后一个结点的next域不再是None，而是指向表的第一个结点。
在循环列表对象中记录表尾结点，可以实现O(1)时间的表头/表尾插入和O(1)时间的表头删除。
由于循环链表中的结点连成一个圈，哪个结点是表头或表尾，主要是概念问题，从表的形态上无法区分。
以下实现了一个简单的循环单链表类，其中包含了几个典型的操作

操作


is_empty() 判断链表是否为空
length() 返回链表的长度
travel() 遍历
add(item) 在头部添加一个节点
append(item) 在尾部添加一个节点
insert(pos, item) 在指定位置pos添加节点
remove(item) 删除一个节点
search(item) 查找节点是否存在
代码已阅借鉴博客内容
'''

#####################
class Node(object):
    """节点"""
    def __init__(self, item):
        self.item = item
        self.next = None


class SinCycLinkedlist(object):
    """单向循环链表"""
    def __init__(self):
        self._head = None

    def is_empty(self):
        """判断链表是否为空"""
        return self._head == None

    def length(self):
        """返回链表的长度"""
        # 如果链表为空，返回长度0
        if self.is_empty():
            return 0
        count = 1
        cur = self._head
        while cur.next != self._head:
            count += 1
            cur = cur.next
        return count

    def travel(self):
        """遍历链表"""
        if self.is_empty():
            return
        cur = self._head
        print (cur.item)
        while cur.next != self._head:
            cur = cur.next
            print (cur.item)
        print ("")


    def add(self, item):
        """头部添加节点"""
        node = Node(item)
        if self.is_empty():
            self._head = node
            node.next = self._head
        else:
            #添加的节点指向_head
            node.next = self._head
            # 移到链表尾部，将尾部节点的next指向node
            cur = self._head
            while cur.next != self._head:
                cur = cur.next
            cur.next = node
            #_head指向添加node的
            self._head = node

    def append(self, item):
        """尾部添加节点"""
        node = Node(item)
        if self.is_empty():
            self._head = node
            node.next = self._head
        else:
            # 移到链表尾部
            cur = self._head
            while cur.next != self._head:
                cur = cur.next
            # 将尾节点指向node
            cur.next = node
            # 将node指向头节点_head
            node.next = self._head

    def insert(self, pos, item):
        """在指定位置添加节点"""
        if pos <= 0:
            self.add(item)
        elif pos > (self.length()-1):
            self.append(item)
        else:
            node = Node(item)
            cur = self._head
            count = 0
            # 移动到指定位置的前一个位置
            while count < (pos-1):
                count += 1
                cur = cur.next
            node.next = cur.next
            cur.next = node

    def remove(self, item):
        """删除一个节点"""
        # 若链表为空，则直接返回
        if self.is_empty():
            return
        # 将cur指向头节点
        cur = self._head
        pre = None
        # 若头节点的元素就是要查找的元素item
        if cur.item == item:
            # 如果链表不止一个节点
            if cur.next != self._head:
                # 先找到尾节点，将尾节点的next指向第二个节点
                while cur.next != self._head:
                    cur = cur.next
                # cur指向了尾节点
                cur.next = self._head.next
                self._head = self._head.next
            else:
                # 链表只有一个节点
                self._head = None
        else:
            pre = self._head
            # 第一个节点不是要删除的
            while cur.next != self._head:
                # 找到了要删除的元素
                if cur.item == item:
                    # 删除
                    pre.next = cur.next
                    return
                else:
                    pre = cur
                    cur = cur.next
            # cur 指向尾节点
            if cur.item == item:
                # 尾部删除
                pre.next = cur.next

    def search(self, item):
        """查找节点是否存在"""
        if self.is_empty():
            return False
        cur = self._head
        if cur.item == item:
            return True
        while cur.next != self._head:
            cur = cur.next
            if cur.item == item:
                return True
        return False

if __name__ == "__main__":
    ll = SinCycLinkedlist()
    ll.add(1)
    ll.add(2)
    ll.append(3)
    ll.insert(2, 4)
    ll.insert(4, 5)
    ll.insert(0, 6)
    print ("length:",ll.length())
    ll.travel()
    print (ll.search(3))
    print (ll.search(7))
    ll.remove(1)
    print ("length:",ll.length())
    ll.travel()
#####################
'''
2.2翻转链表
参考博客中的图示理解
https://blog.csdn.net/weixin_39561100/article/details/79818949
'''
#####################
# -*- coding:utf-8 -*-
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    # 返回ListNode
    def ReverseList(self, pHead):
        # write code here
        if pHead == None or pHead.next == None:
            return pHead  
        cur = pHead 
        tmp = None
        newhead = None  
        while cur:  
            tmp = cur.next   
            cur.next = newhead  
            newhead = cur
            cur = tmp  
        return newhead
# 修改原链表
class Solution:
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head
        Node = None
        while head:
            p = head
            head = head.next
            p.next = Node
            Node = p
        return Node
#####################     
'''
2.3合并两个有序链表
非递归思路 用while循环判断两个链表节点的值，取较小的，直到一个链表为空，循环结束，在循环结束时判断哪个链表为空
直接在链表的head节点上加上
'''
#####################
class Solution:
    def mergeTwoLists(self, l1, l2):
        head = ListNode(0)
        first = head
        while l1 != None and l2 != None:
            if l1.val <= l2.val:
                head.next = ListNode(l1.val)
                l1 = l1.next
            else:
                head.next = ListNode(l2.val)
                l2 = l2.next
            head = head.next
        if l1 != None:
            head.next = l1
        if l2 != None:
            head.next = l2
        return first.next
#####################
'''
2.3递归想法
'''
