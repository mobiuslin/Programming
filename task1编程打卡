'''
数组4还未整理完，仅做完leetcode三道练习，和前面的思想部分博客
'''
'''
1.1实现一个支持动态扩容的数组
参考博客https://blog.csdn.net/u013109501/article/details/88020739代码阅读
'''
###############
#通过python实现动态数组
 
"""
数组特点：
    占用一段连续的内存空间，支持随机（索引）访问，且时间复杂度为O(1)
    添加元素时间复杂度：O(n)
    删除元素时间复杂度：O(n)
"""
 
class Arr:
    def __init__(self, capacity=10):
        """
        构造函数
        :param capacity: 数组最大容量，不指定的话默认为10
        """
        self._capacity = capacity
        self._size = 0                                  # 数组有效元素的数目，初始化为0
        self._data = [None] * self._capacity    # 由于python的list是动态扩展的，而我们要实现底层具有固定容量、占用一段连续的内存空间的数组，所以用None来作为无效元素的标识
 
    def __getitem__(self, item):
        """让Arr类支持索引操作"""
        return self._data[item]
 
    def getSize(self):
        """返回数组有效元素的个数"""
        return self._size
 
    def getCapacity(self):
        """返回当前数组的容量"""
        return self._capacity
 
    def isEmpty(self):
        """判断当前数组是否为空"""
        return self._size == 0
 
    def add(self, index, elem):
        """
        向数组中添加一个元素，注意数组占用的是一段连续的内存空间，所以在添加元素后，数组还是要保证这个特点的，因此需要将后面的元素都向后挪一个位置，而且要注意要先从
        尾部开始挪，防止元素之间的覆盖
        时间复杂度：O(n)
        :param index:   添加的元素所在的索引
        :param elem:    所要添加的元素
        """
        if index < 0 or index > self._size:     # 插入的位置无效
            raise Exception('Add Filed. Require 0 <= index <= self._size')
        if self._size == self._capacity:        # 满了
            self._resize(self._capacity * 2)    # 默认扩容当前容量的二倍。容量翻倍要比容量加上一个固定值要好，这样做均摊复杂度为O(1)。具体请百度
 
        for i in range(self._size - 1, index - 1, -1):  # 从尾部开始挪动元素，在index处腾出一个空间
                                                        # 一定要注意在步长为负数的情况下，区间是左开右闭区间，即(index, self._size - 1]，所以是index-1，与正常的左闭右开区间是相反的！
            self._data[i + 1] = self._data[i]
        self._data[index] = elem        # 将该位置赋值为elem
        self._size += 1                 # 数组有效元素数加1
 
    def addLast(self, elem):
        """
        向数组尾部添加元素
        时间复杂度：O(1)
        :param elem: 所要添加的元素
        """
        self.add(self._size, elem) # 直接调用add方法，注意不用再次判定合法性了，因为add函数中已经判断过了
 
    def addFirst(self, elem):
        """
        想数组头部添加元素
        时间复杂度：O(n)
        :param elem: 所要添加的元素
        """
        self.add(0, elem)   # 同理直接调用add方法
 
    def get(self, index):
        """
        获得索引index处的元素
        时间复杂度：O(1)
        :param index: 数组索引
        :return:      数组索引处的值
        """
        if index < 0 or index >= self._size:        # 判断index的合法性
            raise Exception('Get failed. Index is illegal.')
        return self._data[index]
 
    def getFirst(self):
        """
        获得数组首位置元素的值
        :return: 首位置元素的值
        """
        return self.get(0)      # 直接调用get函数，安全可靠
 
    def getLast(self):
        """
        获得数组末尾元素的值
        :return: 末尾元素的值
        """
        return self.get(self._size - 1)  # 直接调用get函数，安全可靠
 
    def set(self, index, elem):
        """
        将索引为index的元素的值设为elem
        时间复杂度：O(1)
        :param index:  索引
        :param elem:   新的值
        """
        if index < 0 or index >= self._size:        # 判断index的合法性
            raise Exception('Sat failed. Index is illegal.')
        self._data[index] = elem
 
    def contains(self, elem):
        """
        查看数组中是否存在元素elem，最好不要传入一个浮点数，你懂得。。
        时间复杂度：O(n)
        :param elem: 目标元素
        :return:     bool值，存在为真
        """
        for i in range(self._size):        # 遍历
            if self._data[i] == elem:
                return True                # 找到了就返回True
        return False                       # 遍历完了还没找到，就返回False
 
    def find(self, elem):
        """
        在数组中查找元素，并返回元素所在的索引。（如果数组中存在多个elem，只返回最左边elem的索引）
        时间复杂度：O(n)
        :param elem: 目标元素
        :return:     元素所在的索引，没找到则返回-1（无效值）
        """
        for i in range(self._size):         # 遍历数组
            if self._data[i] == elem:
                return i                    # 找到就返回索引
        return -1                           # 没找到返回-1
 
    def findAll(self, elem):
        """
        找到值为elem全部元素的索引
        :param elem: 目标元素
        :return:     一个列表，值为全部elem的索引
        """
        ret_list = Arr()                # 建立一个新的数组用于存储索引值
        for i in range(self._size):     # 遍历数组
            if self._data[i] == elem:
                ret_list.addLast(i)     # 找到就将索引添加进ret_list
        return ret_list
 
    def remove(self, index):
        """
        删除索引为index的元素。index后面的元素都要向前移动一个位置
        时间复杂度：O(n)
        :param index: 目标索引
        :return:      位于该索引的元素的值
        """
        if index < 0 or index >= self._size:    # index合法性检查
            raise Exception('Remove failed.Require 0 <= index < self._size')
        ret = self._data[index]                 # 拷贝一下index处的元素，便于返回
        for i in range(index + 1, self._size):  # index后面的元素都向前挪一个位置
            self._data[i - 1] = self._data[i]
        self._size -= 1         # 维护self._size
        self._data[self._size] = None   # 最后一个元素的垃圾回收
 
        if self._size and self._capacity // self._size == 4:   # 如果当前有效元素为总容量的四分之一且还存在有效元素，则将容量缩减为原来的一半
            self._resize(self._capacity // 2)
        return ret
 
    def removeFirst(self):
        """
        删除数组首位置的元素
        时间复杂度：O(n)
        :return: 数组首位置的元素
        """
        return self.remove(0)   # 调用remove函数
 
    def removeLast(self):
        """
        删除数组末尾的元素
        时间复杂度:O(1)
        :return: 数组末尾的元素
        """
        return self.remove(self._size - 1)      # 调用remove函数
 
    def removeElement(self, elem):
        """
        删除数组中为elem的元素，如果数组中不存在elem，那么什么都不做。如果存在多个相同的elem，只删除最左边的那个
        时间复杂度：O(n)
        :param elem: 要删除的目标元素
        """
        index = self.find(elem)         # 尝试找到目标元素（最左边的）的索引
        if index != -1:                 # elem在数组中就删除，否则什么都不做
            self.remove(index)          # 调用remove函数
 
    def removeAllElement(self, elem):
        """
        删除数组内所有值为elem的元素，可以用递归来写，这里用的迭代的方法。elem不存在就什么都不做
        :param elem: 要删除的目标元素
        """
        while True:
            index = self.find(elem)     # 循环来找elem，如果还存在就继续删除
            if index != -1:             # 若存在
                self.remove(index)
            else:
                break
 
    def get_Max_index(self):
        """
        获取数组中的最大元素的索引，返回最大元素的索引值，如果有多个最大值，默认返回最左边那个的索引
        时间复杂度：O(n)
        :return: 最大元素的索引
        """
        if self.isEmpty():
            raise Exception('Error, array is Empty!')
        max_elem_index = 0    # 记录最大值的索引，初始化为0 
        for i in range(1, self.getSize()):   # 从索引1开始遍历，一直到数组尾部
            if self._data[i] > self._data[max_elem_index]:   # 如果当前索引的值大于最大值索引处元素的值
                max_elem_index = i     # 更新max_elem_index，这样它还是当前最大值的索引
        return max_elem_index     # 遍历完后，将数组的最大值的索引返回
 
    def removeMax(self):
        """
        删除数组中的最大元素，返回最大元素的值，如果有多个最大值，默认值删除最左边那个
        时间复杂度：O(n)
        :return: 最大元素
        """
        return self.remove(self.get_Max_index())   # 直接调用remove函数删除最大值
 
    def get_Min_index(self):
        """
        获取数组中的最小元素的索引，返回最小元素的索引值，如果有多个最小值，默认返回最左边那个的索引
        时间复杂度：O(n)
        :return: 最小元素的索引
        """
        if self.isEmpty():
            raise Exception('Error, array is Empty!')
        min_elem_index = 0    # 记录最小值的索引，初始化为0 
        for i in range(1, self.getSize()):   # 从索引1开始遍历，一直到数组尾部
            if self._data[i] < self._data[min_elem_index]:   # 如果当前索引的值小于最小值索引处元素的值
                min_elem_index = i     # 更新min_elem_index，这样它还是当前最小值的索引
        return min_elem_index     # 遍历完后，将数组的最小值的索引返回
 
    def removeMin(self):
        """
        删除数组中的最小元素，返回最小元素的值，如果有多个最小值，默认值删除最左边那个
        时间复杂度：O(2n)，可以看成是O(n)的
        :return: 最小元素
        """
        return self.remove(self.get_Min_index())
 
    def swap(self, index1, index2):
        """
        交换分别位于索引index1和索引index2处的元素
        :param index1: 索引1
        :param index2: 索引2
        """ 
        if index1 < 0 or index2 < 0 or index1 >= self._size or index2 >= self._size:        # 合法性检查
            raise Exception('Index is illegal')
        self._data[index1], self._data[index2] = self._data[index2], self._data[index1]     # 交换元素
 
    def printArr(self):
        """对数组元素进行打印"""
        for i in range(self._size):
            print(self._data[i], end='  ')
        print('\nSize: %d-----Capacity: %d' % (self.getSize(), self.getCapacity()))
 
    # private
    def _resize(self, new_capacity):
        """
        数组容量放缩至new_capacity，私有成员函数
        :param new_capacity: 新的容量
        """
        new_arr = Arr(new_capacity)         # 建立一个新的数组new_arr，容量为new_capacity
        for i in range(self._size):
            new_arr.addLast(self._data[i])  # 将当前数组的元素按当前顺序全部移动到new_arr中
        self._capacity = new_capacity       # 数组容量变为new_capacity
        self._data = new_arr._data          # 将new_arr._data赋值给self._data，从而完成数组的容量放缩操作

###############
'''
1.2关于python array模块动态数组
可用append，add，extend函数
删除可用pop，remove函数
'''
'''
2实现一个大小固定的有序数组，支持动态增删改操作
'''
###############


###############
'''
3实现两个有序数组合并为一个有序数组
python中将两个有序数组合并，再利用sort函数实现排序。
或者对两个数组同时遍历，遇到小值将其放入新的数组中，一旦有一个数组已遍历完将剩余值全部放置新数组最后。

'''

'''
ex01
'''
###############
#
# @lc app=leetcode.cn id=15 lang=python
#
# [15] 三数之和
#
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        list_nums = []
        nums.sort()
        for i in range(len(nums)):
            if nums[i] > 0:
                break
            if i > 0 and nums[i] == nums[i-1]:
                continue
            j = i + 1
            k = len(nums) - 1
            while j < k:
                if nums[j] + nums[k] == -nums[i]:
                    list_nums.append([nums[i],nums[j],nums[k]])
                    while j<k and nums[j]==nums[j+1]:j+=1
                    while j<k and nums[k]==nums[k-1]:k-=1
                    j+=1
                    k-=1
                elif nums[j]+nums[k]<-nums[i]:
                    j+=1
                else:
                    k-=1
        return list_nums
###############
'''
ex02
'''
###############
#
# @lc app=leetcode.cn id=169 lang=python
#
# [169] 求众数
#
class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        len_=len(nums)
        cnt=1
        cnt_=1
        j=0
        j_max=0
        for i in range(1,len_):
            if nums[i]==nums[i-1]:
                cnt+=1
                j=i
            if nums[i]!=nums[i-1]:
                cnt=1
            if cnt_<cnt:
                cnt_=cnt
                j_max=j
        return nums[j_max]
###############
'''
ex03
'''
###############
#
# @lc app=leetcode.cn id=41 lang=python
#
# [41] 缺失的第一个正数
#
class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """ 
        nums=set(nums)
        nums=list(nums)
        nums.sort()
        len_=len(nums)
        j=1
        j0=1
        if len_>0:
            for i in range(len_):
                if nums[i]>0:
                    if nums[i]==j:
                        j0=j
                        j0+=1
                    else:
                        return j0
                        break
                    j+=1
                if i==len_-1:
                    return j0
        else:
            return 1
###############

Task2
#2.1.1关于单链表代码熟悉借鉴博客内容
#####################
class Node(object):
    def __init__(self, elem):
        self.elem = elem
        self.next = None
        
class SingleLinkList(object):
    '''单链表'''
    def __init__(self, node=None):
        self.__head = node
        
    def is_empty(self):
        return self.__head == None
    
    def length(self):
        cur = self.__head
        count = 0
        while cur != None:
            count += 1
            cur = cur.next
        return count
    
    def travel(self):
        '''遍历列表'''
        cur = self.__head
        while cur != None:
            print(cur.elem, end= ' ')
            cur = cur.next
        print("\n")
        
    def add(self, item):
        '''链表头部添加元素'''
        node = Node(item)
        node.next = self.__head
        self.__head = node
        
    def append(self, item):
        '''链表尾部添加元素'''
        node = Node(item)
        if self.is_empty():
            self.__head = node
        else:
            cur = self.__head
            while cur.next != None:
                cur = cur.next
            cur.next = node
    
    def insert(self, pos, item):
        '''指定位置添加元素'''
        if pos <= 0:
            self.add(item)
        elif pos > self.length() - 1:
            self.append(item)
        else:
            per = self.__head
            count = 0
            while count < pos - 1:
                count += 1
                per = per.next
            node = Node(item)
            node.next = per.next
            per.next = node
            
    def remove(self, item):
        '''删除节点'''
        cur = self.__head
        pre = None
        while cur != None:
            if cur.elem == item:
                '''先判断是否为头节点'''
                if cur == self.__head:
                    self.__head = cur.next
                else:
                    pre.next = cur.next
                break
            else:
                pre = cur
                cur = cur.next
    
    def search(self, item):
        '''查找节点是否存在'''
        cur = self.__head
        while not cur:
            if cur.elem == item:
                return True
            else:
                cur = cur.next
        return False
    
if __name__ == "__main__":
    node = Node(100)
    ll = SingleLinkList()
    print(ll.is_empty())
    print(ll.length())

    ll.append(3)
    ll.append(4)
    ll.add(9989)
    ll.insert(-3,110)
    ll.insert(4,111)
    
    print(ll.is_empty())
    print(ll.length())
    
    ll.travel()
    ll.remove(111)
    ll.travel()
#####################
'''
2.1.2循环单链表是单链表的一种变形，其最后一个结点的next域不再是None，而是指向表的第一个结点。
在循环列表对象中记录表尾结点，可以实现O(1)时间的表头/表尾插入和O(1)时间的表头删除。
由于循环链表中的结点连成一个圈，哪个结点是表头或表尾，主要是概念问题，从表的形态上无法区分。
以下实现了一个简单的循环单链表类，其中包含了几个典型的操作

操作


is_empty() 判断链表是否为空
length() 返回链表的长度
travel() 遍历
add(item) 在头部添加一个节点
append(item) 在尾部添加一个节点
insert(pos, item) 在指定位置pos添加节点
remove(item) 删除一个节点
search(item) 查找节点是否存在
代码已阅借鉴博客内容
'''

#####################
class Node(object):
    """节点"""
    def __init__(self, item):
        self.item = item
        self.next = None


class SinCycLinkedlist(object):
    """单向循环链表"""
    def __init__(self):
        self._head = None

    def is_empty(self):
        """判断链表是否为空"""
        return self._head == None

    def length(self):
        """返回链表的长度"""
        # 如果链表为空，返回长度0
        if self.is_empty():
            return 0
        count = 1
        cur = self._head
        while cur.next != self._head:
            count += 1
            cur = cur.next
        return count

    def travel(self):
        """遍历链表"""
        if self.is_empty():
            return
        cur = self._head
        print (cur.item)
        while cur.next != self._head:
            cur = cur.next
            print (cur.item)
        print ("")


    def add(self, item):
        """头部添加节点"""
        node = Node(item)
        if self.is_empty():
            self._head = node
            node.next = self._head
        else:
            #添加的节点指向_head
            node.next = self._head
            # 移到链表尾部，将尾部节点的next指向node
            cur = self._head
            while cur.next != self._head:
                cur = cur.next
            cur.next = node
            #_head指向添加node的
            self._head = node

    def append(self, item):
        """尾部添加节点"""
        node = Node(item)
        if self.is_empty():
            self._head = node
            node.next = self._head
        else:
            # 移到链表尾部
            cur = self._head
            while cur.next != self._head:
                cur = cur.next
            # 将尾节点指向node
            cur.next = node
            # 将node指向头节点_head
            node.next = self._head

    def insert(self, pos, item):
        """在指定位置添加节点"""
        if pos <= 0:
            self.add(item)
        elif pos > (self.length()-1):
            self.append(item)
        else:
            node = Node(item)
            cur = self._head
            count = 0
            # 移动到指定位置的前一个位置
            while count < (pos-1):
                count += 1
                cur = cur.next
            node.next = cur.next
            cur.next = node

    def remove(self, item):
        """删除一个节点"""
        # 若链表为空，则直接返回
        if self.is_empty():
            return
        # 将cur指向头节点
        cur = self._head
        pre = None
        # 若头节点的元素就是要查找的元素item
        if cur.item == item:
            # 如果链表不止一个节点
            if cur.next != self._head:
                # 先找到尾节点，将尾节点的next指向第二个节点
                while cur.next != self._head:
                    cur = cur.next
                # cur指向了尾节点
                cur.next = self._head.next
                self._head = self._head.next
            else:
                # 链表只有一个节点
                self._head = None
        else:
            pre = self._head
            # 第一个节点不是要删除的
            while cur.next != self._head:
                # 找到了要删除的元素
                if cur.item == item:
                    # 删除
                    pre.next = cur.next
                    return
                else:
                    pre = cur
                    cur = cur.next
            # cur 指向尾节点
            if cur.item == item:
                # 尾部删除
                pre.next = cur.next

    def search(self, item):
        """查找节点是否存在"""
        if self.is_empty():
            return False
        cur = self._head
        if cur.item == item:
            return True
        while cur.next != self._head:
            cur = cur.next
            if cur.item == item:
                return True
        return False

if __name__ == "__main__":
    ll = SinCycLinkedlist()
    ll.add(1)
    ll.add(2)
    ll.append(3)
    ll.insert(2, 4)
    ll.insert(4, 5)
    ll.insert(0, 6)
    print ("length:",ll.length())
    ll.travel()
    print (ll.search(3))
    print (ll.search(7))
    ll.remove(1)
    print ("length:",ll.length())
    ll.travel()
#####################
'''
2.2翻转链表
参考博客中的图示理解
https://blog.csdn.net/weixin_39561100/article/details/79818949
'''
#####################
# -*- coding:utf-8 -*-
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    # 返回ListNode
    def ReverseList(self, pHead):
        # write code here
        if pHead == None or pHead.next == None:
            return pHead  
        cur = pHead 
        tmp = None
        newhead = None  
        while cur:  
            tmp = cur.next   
            cur.next = newhead  
            newhead = cur
            cur = tmp  
        return newhead
# 修改原链表
class Solution:
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head
        Node = None
        while head:
            p = head
            head = head.next
            p.next = Node
            Node = p
        return Node
#####################     
'''
2.3合并两个有序链表
非递归思路 用while循环判断两个链表节点的值，取较小的，直到一个链表为空，循环结束，在循环结束时判断哪个链表为空
直接在链表的head节点上加上
'''
#####################
class Solution:
    def mergeTwoLists(self, l1, l2):
        head = ListNode(0)
        first = head
        while l1 != None and l2 != None:
            if l1.val <= l2.val:
                head.next = ListNode(l1.val)
                l1 = l1.next
            else:
                head.next = ListNode(l2.val)
                l2 = l2.next
            head = head.next
        if l1 != None:
            head.next = l1
        if l2 != None:
            head.next = l2
        return first.next
#####################
'''
2.3递归想法
'''
