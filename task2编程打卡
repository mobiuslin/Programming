'''
1.1用数组实现一个顺序栈
'''
class Stack():
    def __init__(self):
        self.items = []
        
    def is_empty(self):
        return self.items == []
    
    def pop(self):
        try:
            return self.items.pop()
        except:
            raise
            
    def push(self, item):
        self.items.append(item)
        
    def peek(self):
        return self.items[len(self.item)-1]
    
    def size(self):
        return len(self.items)
        
'''
1.2用链表实现一个链式栈\
参考博客https://blog.csdn.net/u012219371/article/details/85984635
'''
class Node(object):
    def __init__(self, data):
        self.data = data
        self.next = None


class Stack(object):
    def __init__(self):
        self.node = Node(None)
        self.head = self.node
        self.size = 0

    def is_empty(self):
        return self.size == 0

    def get_size(self):
        return self.size

    def push(self, data):
        node = Node(data)
        node.next = self.head.next
        self.head.next = node
        self.size += 1

    def pop(self):
        if not self.is_empty():
            current_node = self.head.next
            if self.get_size() == 1:
                self.head.next = None
            else:
                self.head.next = self.head.next.next
            self.size -= 1
            return current_node.data
        else:
            raise IndexError("pop from empty stack")

    def top(self):
        if not self.is_empty():
            return self.head.next.data
        else:
            raise IndexError("stack is empty")


s = Stack()
s.push(1)
s.push(2)
print(s.get_size())
s.pop()
print(s.get_size())
'''
1.3编程模拟实现一个浏览器的前进、后退功能
参考博客https://blog.csdn.net/qq_41333915/article/details/85236291 
浏览器大家都很熟悉，当我们点开一系列页面例如a-b-c时，到c页面后退可以查看b、a页面，在b、a页面前进可以查看c页面，
但是当在b页面重新进入一个新的页面时，此时再也不能通过前进或者后退进入c页面了，两个栈即可实现此功能。

1.首先，进入一系列页面a、b、c：将a、b、c依次压入栈Stack1，此时在页面c；
2.后退两步：将c、b依次弹出再压入栈Stack2；
3.前进一步：将b从Stack2弹出压入Stack1；
4.打开新的页面：将d压入Stack1；
5.清空Stack2，此时就不能通过前进或者后退进入页面c了。
--------------------- 
代码参考博客https://www.cnblogs.com/zhangyating/p/8385996.html
'''
# _*_ coding:utf-8 _*_
# 导入webdriver包
from selenium import webdriver
from time import sleep
driver = webdriver.Firefox()
driver.get("https://www.baidu.com/")
sleep(5)
print("访问news页")
driver.get("http://news.baidu.com/")
sleep(5)
driver.back()#浏览器后退
sleep(5)
driver.forward()#浏览器前进
sleep(5)
driver.refresh()#浏览器刷新
sleep(5)
driver.quit()


'''
3.1编程实现斐波那契数列求值 f(n)=f(n-1)+f(n-2)
'''
# 递归法
#
# @lc app=leetcode.cn id=509 lang=python
#
# [509] 斐波那契数
#
class Solution(object):
    def fib(self, N):
        """
        :type N: int
        :rtype: int
        """
        def F(N):
            if N==0:
                return 0
            elif N==1 or N==2:
                return 1
            else:
                return F(N-1)+F(N-2)
        return F(N)
        
        
        
'''
3.2编程实现求阶乘 n!
'''
# 递归法
def factorial(n):
    if n == 1:
        return 1
    else:
        return n*factorial(n-1)
# 迭代法
def factorial_diedai(n):
    result = n
    for i in range(1,n):
        result *= 1
    return result
number = int(input());
result = factorial(number)
print(" %d 的阶乘是 %d" % (number, result))

'''
3.3编程实现一组数据集合的全排列
取出数组中第一个元素放到最后，即a[1]与a[n]交换，然后递归求a[n-1]的全排列

1）如果数组只有一个元素n=1，a={1} 则全排列就是{1}
2）如果数组有两个元素n=2，a={1,2} 则全排列是：
{2,1}--a[1]与a[2]交换。交换后求a[2-1]={2}的全排列，归结到1)
{1,2}--a[2]与a[2]交换。交换后求a[2-1]={1}的全排列，归结到1)
3）如果数组有三个元素n=3，a={1,2,3} 则全排列是
{{2,3},1}--a[1]与a[3]交换。后求a[3-1]={2,3}的全排列，归结到2）
{{1,3},2)--a[2]与a[3]交换。后求a[3-1]={1,3}的全排列，归结到2）
{{1,2},3)--a[3]与a[3]交换。后求a[3-1]={1,2}的全排列，归结到2）
...
参考博客https://blog.csdn.net/zhoufen12345/article/details/53560099 
'''
count = 0
def perm(n, begin, end):
    global count
    if begin >= end:
        print(n)
        count += 1
    else:
        i = begin
        for num in range(begin, end):
            n[num], n[i] = n[i], n[num]
            perm(n, begin+1, end)
            n[num], n[i] = n[i], n[num]
            
n = [1, 2, 3, 4]
perm(n, 0, len(n))
print(count)

